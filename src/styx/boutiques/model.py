# flake8: noqa
# type: ignore
# generated by datamodel-codegen:
#   filename:  descriptor.schema.json
#   timestamp: 2023-10-03T19:29:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class Type(Enum):
    docker = "docker"
    singularity = "singularity"


class ContainerImageItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type
    image: constr(min_length=1) = Field(
        ...,
        description="Name of an image where the tool is installed and configured. Example: bids/mriqc.",
    )
    entrypoint: Optional[bool] = Field(
        None,
        description="Flag indicating whether or not the container uses an entrypoint.",
    )
    index: Optional[constr(min_length=1)] = Field(
        None,
        description="Optional index where the image is available, if not the standard location. Example: docker.io",
    )
    container_opts: Optional[List[str]] = Field(
        None,
        alias="container-opts",
        description="Container-level arguments for the application. Example: --privileged",
    )
    working_directory: Optional[Any] = Field(None, alias="working-directory")
    container_hash: Optional[Any] = Field(None, alias="container-hash")


class Type1(Enum):
    rootfs = "rootfs"


class ContainerImageItem1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type1
    url: constr(min_length=1) = Field(..., description="URL where the image is available.")
    working_directory: Optional[Any] = Field(None, alias="working-directory")
    container_hash: Optional[Any] = Field(None, alias="container-hash")


class ContainerImage1(BaseModel):
    working_directory: Optional[constr(min_length=1)] = Field(
        None,
        alias="working-directory",
        description="Location from which this task must be launched within the container.",
    )
    container_hash: Optional[constr(min_length=1)] = Field(
        None, alias="container-hash", description="Hash for the given container."
    )


class ContainerImage2(ContainerImageItem, ContainerImage1):
    pass


class ContainerImage3(ContainerImageItem1, ContainerImage1):
    pass


class ContainerImage(RootModel[Union[ContainerImage2, ContainerImage3]]):
    root: Union[ContainerImage2, ContainerImage3]


class SchemaVersion(Enum):
    field_0_5 = "0.5"


class EnvironmentVariable(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: constr(pattern=r"^[a-z,A-Z][0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='The environment variable name (identifier) containing only alphanumeric characters and underscores. Example: "PROGRAM_PATH".',
    )
    value: str = Field(..., description="The value of the environment variable.")
    description: Optional[str] = Field(None, description="Description of the environment variable.")


class Group(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: "outfile_group".',
    )
    name: constr(min_length=1) = Field(..., description="A human-readable name for the input group.")
    description: Optional[str] = Field(None, description="Description of the input group.")
    members: List[constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1)] = Field(
        ..., description="IDs of the inputs belonging to this group."
    )
    mutually_exclusive: Optional[bool] = Field(
        None,
        alias="mutually-exclusive",
        description="True if only one input in the group may be active at runtime.",
    )
    one_is_required: Optional[bool] = Field(
        None,
        alias="one-is-required",
        description="True if at least one of the inputs in the group must be active at runtime.",
    )
    all_or_none: Optional[bool] = Field(
        None,
        alias="all-or-none",
        description="True if members of the group need to be toggled together",
    )


class Type2(Enum):
    Flag = "Flag"


class ListModel(Enum):
    bool_False = False


class Input(BaseModel):
    type: Optional[Type2] = None
    list: Optional[ListModel] = None


class Type3(Enum):
    String = "String"
    File = "File"
    Number = "Number"


class Input1(BaseModel):
    type: Optional[Type3] = None


class Type4(Enum):
    String = "String"
    File = "File"
    Flag = "Flag"
    Number = "Number"


class Inputs(Input):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: "data_file".',
    )
    name: constr(min_length=1) = Field(..., description="A human-readable input name. Example: 'Data file'.")
    type: Type4 = Field(..., description="Input type.")
    description: Optional[str] = Field(None, description="Input description.")
    value_key: Optional[str] = Field(
        None,
        alias="value-key",
        description="A string contained in command-line, substituted by the input value and/or flag at runtime.",
    )
    list: Optional[bool] = Field(
        None,
        description='True if input is a list of value. An input of type "Flag" cannot be a list.',
    )
    list_separator: Optional[str] = Field(
        None,
        alias="list-separator",
        description="Separator used between list items. Defaults to a single space.",
    )
    optional: Optional[bool] = Field(None, description="True if input is optional.")
    command_line_flag: Optional[str] = Field(
        None,
        alias="command-line-flag",
        description='Option flag of the input, involved in the value-key substitution. Inputs of type "Flag" have to have a command-line flag. Examples: -v, --force.',
    )
    requires_inputs: Optional[List[str]] = Field(
        None,
        alias="requires-inputs",
        description="Ids of the inputs or ids of groups whose members must be active for this input to be available.",
    )
    disables_inputs: Optional[List[str]] = Field(
        None,
        alias="disables-inputs",
        description="Ids of the inputs that are disabled when this input is active.",
    )
    command_line_flag_separator: Optional[str] = Field(
        None,
        alias="command-line-flag-separator",
        description="Separator used between flags and their arguments. Defaults to a single space.",
    )
    default_value: Optional[Any] = Field(
        None,
        alias="default-value",
        description="Default value of the input. The default value is set when no value is specified, even when the input is optional. If the desired behavior is to omit the input from the command line when no value is specified, then no default value should be used. In this case, the tool might still use a default value internally, but this will remain undocumented in the Boutiques interface.",
    )
    value_choices: Optional[List[Union[str, float]]] = Field(
        None,
        alias="value-choices",
        description="Permitted choices for input value. May not be used with the Flag type.",
    )
    value_requires: Optional[Dict[str, Any]] = Field(
        None,
        alias="value-requires",
        description="Ids of the inputs that are required when the corresponding value choice is selected.",
    )
    value_disables: Optional[Dict[str, Any]] = Field(
        None,
        alias="value-disables",
        description="Ids of the inputs that are disabled when the corresponding value choice is selected.",
    )
    integer: Optional[bool] = Field(
        None,
        description="Specify whether the input should be an integer. May only be used with Number type inputs.",
    )
    minimum: Optional[float] = Field(
        None,
        description="Specify the minimum value of the input (inclusive). May only be used with Number type inputs.",
    )
    maximum: Optional[float] = Field(
        None,
        description="Specify the maximum value of the input (inclusive). May only be used with Number type inputs.",
    )
    exclusive_minimum: Optional[bool] = Field(
        None,
        alias="exclusive-minimum",
        description="Specify whether the minimum is exclusive or not. May only be used with Number type inputs.",
    )
    exclusive_maximum: Optional[bool] = Field(
        None,
        alias="exclusive-maximum",
        description="Specify whether the maximum is exclusive or not. May only be used with Number type inputs.",
    )
    min_list_entries: Optional[float] = Field(
        None,
        alias="min-list-entries",
        description="Specify the minimum number of entries in the list. May only be used with List type inputs.",
    )
    max_list_entries: Optional[float] = Field(
        None,
        alias="max-list-entries",
        description="Specify the maximum number of entries in the list. May only be used with List type inputs.",
    )
    uses_absolute_path: Optional[bool] = Field(
        None,
        alias="uses-absolute-path",
        description="Specifies that this input must be given as an absolute path. Only specifiable for File type inputs.",
    )


class Inputs1(Input1):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: "data_file".',
    )
    name: constr(min_length=1) = Field(..., description="A human-readable input name. Example: 'Data file'.")
    type: Type4 = Field(..., description="Input type.")
    description: Optional[str] = Field(None, description="Input description.")
    value_key: Optional[str] = Field(
        None,
        alias="value-key",
        description="A string contained in command-line, substituted by the input value and/or flag at runtime.",
    )
    list: Optional[bool] = Field(
        None,
        description='True if input is a list of value. An input of type "Flag" cannot be a list.',
    )
    list_separator: Optional[str] = Field(
        None,
        alias="list-separator",
        description="Separator used between list items. Defaults to a single space.",
    )
    optional: Optional[bool] = Field(None, description="True if input is optional.")
    command_line_flag: Optional[str] = Field(
        None,
        alias="command-line-flag",
        description='Option flag of the input, involved in the value-key substitution. Inputs of type "Flag" have to have a command-line flag. Examples: -v, --force.',
    )
    requires_inputs: Optional[List[str]] = Field(
        None,
        alias="requires-inputs",
        description="Ids of the inputs or ids of groups whose members must be active for this input to be available.",
    )
    disables_inputs: Optional[List[str]] = Field(
        None,
        alias="disables-inputs",
        description="Ids of the inputs that are disabled when this input is active.",
    )
    command_line_flag_separator: Optional[str] = Field(
        None,
        alias="command-line-flag-separator",
        description="Separator used between flags and their arguments. Defaults to a single space.",
    )
    default_value: Optional[Any] = Field(
        None,
        alias="default-value",
        description="Default value of the input. The default value is set when no value is specified, even when the input is optional. If the desired behavior is to omit the input from the command line when no value is specified, then no default value should be used. In this case, the tool might still use a default value internally, but this will remain undocumented in the Boutiques interface.",
    )
    value_choices: Optional[List[Union[str, float]]] = Field(
        None,
        alias="value-choices",
        description="Permitted choices for input value. May not be used with the Flag type.",
    )
    value_requires: Optional[Dict[str, Any]] = Field(
        None,
        alias="value-requires",
        description="Ids of the inputs that are required when the corresponding value choice is selected.",
    )
    value_disables: Optional[Dict[str, Any]] = Field(
        None,
        alias="value-disables",
        description="Ids of the inputs that are disabled when the corresponding value choice is selected.",
    )
    integer: Optional[bool] = Field(
        None,
        description="Specify whether the input should be an integer. May only be used with Number type inputs.",
    )
    minimum: Optional[float] = Field(
        None,
        description="Specify the minimum value of the input (inclusive). May only be used with Number type inputs.",
    )
    maximum: Optional[float] = Field(
        None,
        description="Specify the maximum value of the input (inclusive). May only be used with Number type inputs.",
    )
    exclusive_minimum: Optional[bool] = Field(
        None,
        alias="exclusive-minimum",
        description="Specify whether the minimum is exclusive or not. May only be used with Number type inputs.",
    )
    exclusive_maximum: Optional[bool] = Field(
        None,
        alias="exclusive-maximum",
        description="Specify whether the maximum is exclusive or not. May only be used with Number type inputs.",
    )
    min_list_entries: Optional[float] = Field(
        None,
        alias="min-list-entries",
        description="Specify the minimum number of entries in the list. May only be used with List type inputs.",
    )
    max_list_entries: Optional[float] = Field(
        None,
        alias="max-list-entries",
        description="Specify the maximum number of entries in the list. May only be used with List type inputs.",
    )
    uses_absolute_path: Optional[bool] = Field(
        None,
        alias="uses-absolute-path",
        description="Specifies that this input must be given as an absolute path. Only specifiable for File type inputs.",
    )


class Test(BaseModel):
    name: constr(min_length=1) = Field(..., description="Name of the test-case")
    invocation: Dict[str, Any]


class OutputFile(BaseModel):
    file_template: Optional[List[str]] = Field(None, alias="file-template", min_length=1)
    list: Optional[ListModel] = None


class FileTemplate(Enum):
    bool_False = False


class OutputFile1(BaseModel):
    file_template: Optional[FileTemplate] = Field(None, alias="file-template")


class ConditionalPathTemplateItem(BaseModel):
    propertyNames: Optional[Any] = None


class OutputFiles(OutputFile):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: "data_file"',
    )
    name: constr(min_length=1) = Field(..., description="A human-readable output name. Example: 'Data file'")
    description: Optional[str] = Field(None, description="Output description.")
    value_key: Optional[str] = Field(
        None,
        alias="value-key",
        description="A string contained in command-line, substituted by the output value and/or flag at runtime.",
    )
    path_template: Optional[constr(min_length=1)] = Field(
        None,
        alias="path-template",
        description='Describes the output file path relatively to the execution directory. May contain input value keys and wildcards. Example: "results/[INPUT1]_brain*.mnc".',
    )
    conditional_path_template: Optional[List[ConditionalPathTemplateItem]] = Field(
        None,
        alias="conditional-path-template",
        description='List of objects containing boolean statement (Limited python syntax: ==, !=, <, >, <=, >=, and, or) and output file paths relative to the execution directory, assign path of first true boolean statement. May contain input value keys, "default" object required if "optional" set to True . Example list: "[{"[PARAM1] > 8": "outputs/[INPUT1].txt"}, {"default": "outputs/default.txt"}]".',
        min_length=1,
    )
    path_template_stripped_extensions: Optional[List[str]] = Field(
        None,
        alias="path-template-stripped-extensions",
        description='List of file extensions that will be stripped from the input values before being substituted in the path template. Example: [".nii",".nii.gz"].',
    )
    list: Optional[bool] = Field(None, description="True if output is a list of value.")
    optional: Optional[bool] = Field(None, description="True if output may not be produced by the tool.")
    command_line_flag: Optional[str] = Field(
        None,
        alias="command-line-flag",
        description="Option flag of the output, involved in the value-key substitution. Examples: -o, --output",
    )
    command_line_flag_separator: Optional[str] = Field(
        None,
        alias="command-line-flag-separator",
        description="Separator used between flags and their arguments. Defaults to a single space.",
    )
    uses_absolute_path: Optional[bool] = Field(
        None,
        alias="uses-absolute-path",
        description="Specifies that this output filepath will be given as an absolute path.",
    )
    file_template: Optional[List[str]] = Field(
        None,
        alias="file-template",
        description="An array of strings that may contain value keys. Each item will be a line in the configuration file.",
        min_length=1,
    )


class OutputFiles1(OutputFile1):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[0-9,_,a-z,A-Z]*$", min_length=1) = Field(
        ...,
        description='A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: "data_file"',
    )
    name: constr(min_length=1) = Field(..., description="A human-readable output name. Example: 'Data file'")
    description: Optional[str] = Field(None, description="Output description.")
    value_key: Optional[str] = Field(
        None,
        alias="value-key",
        description="A string contained in command-line, substituted by the output value and/or flag at runtime.",
    )
    path_template: Optional[constr(min_length=1)] = Field(
        None,
        alias="path-template",
        description='Describes the output file path relatively to the execution directory. May contain input value keys and wildcards. Example: "results/[INPUT1]_brain*.mnc".',
    )
    conditional_path_template: Optional[List[ConditionalPathTemplateItem]] = Field(
        None,
        alias="conditional-path-template",
        description='List of objects containing boolean statement (Limited python syntax: ==, !=, <, >, <=, >=, and, or) and output file paths relative to the execution directory, assign path of first true boolean statement. May contain input value keys, "default" object required if "optional" set to True . Example list: "[{"[PARAM1] > 8": "outputs/[INPUT1].txt"}, {"default": "outputs/default.txt"}]".',
        min_length=1,
    )
    path_template_stripped_extensions: Optional[List[str]] = Field(
        None,
        alias="path-template-stripped-extensions",
        description='List of file extensions that will be stripped from the input values before being substituted in the path template. Example: [".nii",".nii.gz"].',
    )
    list: Optional[bool] = Field(None, description="True if output is a list of value.")
    optional: Optional[bool] = Field(None, description="True if output may not be produced by the tool.")
    command_line_flag: Optional[str] = Field(
        None,
        alias="command-line-flag",
        description="Option flag of the output, involved in the value-key substitution. Examples: -o, --output",
    )
    command_line_flag_separator: Optional[str] = Field(
        None,
        alias="command-line-flag-separator",
        description="Separator used between flags and their arguments. Defaults to a single space.",
    )
    uses_absolute_path: Optional[bool] = Field(
        None,
        alias="uses-absolute-path",
        description="Specifies that this output filepath will be given as an absolute path.",
    )
    file_template: Optional[List[str]] = Field(
        None,
        alias="file-template",
        description="An array of strings that may contain value keys. Each item will be a line in the configuration file.",
        min_length=1,
    )


class SuggestedResources(BaseModel):
    cpu_cores: Optional[conint(ge=1)] = Field(
        None,
        alias="cpu-cores",
        description="The requested number of cpu cores to run the described application",
    )
    ram: Optional[confloat(ge=0.0)] = Field(
        None,
        description="The requested number of GB RAM to run the described application",
    )
    disk_space: Optional[confloat(ge=0.0)] = Field(
        None,
        alias="disk-space",
        description="The requested number of GB of storage to run the described application",
    )
    nodes: Optional[conint(ge=1)] = Field(
        None,
        description="The requested number of nodes to spread the described application across",
    )
    walltime_estimate: Optional[confloat(ge=0.0)] = Field(
        None,
        alias="walltime-estimate",
        description="Estimated wall time of a task in seconds.",
    )


class ErrorCode(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: int = Field(..., description="Value of the exit code")
    description: str = Field(..., description="Description of the error code.")


class Tool(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: constr(min_length=1) = Field(..., description="Tool name.")
    tool_version: constr(min_length=1) = Field(..., alias="tool-version", description="Tool version.")
    description: constr(min_length=1) = Field(..., description="Tool description.")
    deprecated_by_doi: Optional[Union[constr(min_length=1), bool]] = Field(
        None,
        alias="deprecated-by-doi",
        description="doi of the tool that deprecates the current one. May be set to 'true' if the current tool is deprecated but no specific tool deprecates it.",
    )
    author: Optional[constr(min_length=1)] = Field(None, description="Tool author name(s).")
    url: Optional[constr(min_length=1)] = Field(None, description="Tool URL.")
    descriptor_url: Optional[constr(min_length=1)] = Field(
        None,
        alias="descriptor-url",
        description="Link to the descriptor itself (e.g. the GitHub repo where it is hosted).",
    )
    doi: Optional[constr(min_length=1)] = Field(None, description="DOI of the descriptor (not of the tool itself).")
    shell: Optional[constr(min_length=1)] = Field(
        None,
        description="Absolute path of the shell interpreter to use in the container (defaults to /bin/sh).",
    )
    tool_doi: Optional[constr(min_length=1)] = Field(
        None, alias="tool-doi", description="DOI of the tool (not of the descriptor)."
    )
    command_line: constr(min_length=1) = Field(
        ...,
        alias="command-line",
        description='A string that describes the tool command line, where input and output values are identified by "keys". At runtime, command-line keys are substituted with flags and values.',
    )
    container_image: Optional[ContainerImage] = Field(None, alias="container-image")
    schema_version: SchemaVersion = Field(..., alias="schema-version", description="Version of the schema used.")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(
        None,
        alias="environment-variables",
        description="An array of key-value pairs specifying environment variable names and their values to be used in the execution environment.",
        min_length=1,
    )
    groups: Optional[List[Group]] = Field(
        None,
        description="Sets of identifiers of inputs, each specifying an input group.",
        min_length=1,
    )
    inputs: List[Union[Inputs, Inputs1]] = Field(..., min_length=1)
    tests: Optional[List[Test]] = Field(None, min_length=1)
    online_platform_urls: Optional[List[constr(pattern=r"^https?://")]] = Field(
        None,
        alias="online-platform-urls",
        description="Online platform URLs from which the tool can be executed.",
    )
    output_files: Optional[List[Union[OutputFiles, OutputFiles1]]] = Field(None, alias="output-files", min_length=1)
    invocation_schema: Optional[Dict[str, Any]] = Field(None, alias="invocation-schema")
    suggested_resources: Optional[SuggestedResources] = Field(None, alias="suggested-resources")
    tags: Optional[Dict[str, List[str]]] = Field(
        None,
        description="A set of key-value pairs specifying tags describing the pipeline. The tag names are open, they might be more constrained in the future.",
    )
    error_codes: Optional[List[ErrorCode]] = Field(
        None,
        alias="error-codes",
        description="An array of key-value pairs specifying exit codes and their description. Can be used for tools to specify the meaning of particular exit codes. Exit code 0 is assumed to indicate a successful execution.",
        min_length=1,
    )
    custom: Optional[Dict[str, Any]] = None
